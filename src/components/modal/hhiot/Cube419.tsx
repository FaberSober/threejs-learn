/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 cube419.glb --keepgroups --keepnames
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import Indicator from './Indicator'
import * as THREE from 'three'
import { CubeProps } from './type'


export function Cube419({ ...props }: CubeProps) {
  const { nodes, materials } = useGLTF('/assets/model/hhiot/jz.glb')
  const targetRef = useRef<THREE.Group>(null!)
  const [hovered, setHovered] = useState(false)
  // 克隆材质以防止影响其他使用相同材质的对象
  const meshMaterial = materials.Color_M05.clone()
  // const backMaterial = materials.BackColor.clone()

  // 设置发光效果
  if (hovered) {
    meshMaterial.emissive = new THREE.Color(0x666666)
    // backMaterial.emissive = new THREE.Color(0x666666)
  } else {
    meshMaterial.emissive = new THREE.Color(0x000000)
    // backMaterial.emissive = new THREE.Color(0x000000)
  }

  return (
    <group name="419" {...props} dispose={null}>
      {/* <group name="Mesh419" position={[-15.494, 33.843, 61.451]}> */}
      <group
        ref={targetRef}
        name="Mesh419"
        position={[-15.494, 33.843, 61.451]}
        onPointerOver={(e) => {
          e.stopPropagation()
          setHovered(true)
          document.body.style.cursor = 'pointer'
        }}
        onPointerOut={(e) => {
          e.stopPropagation()
          setHovered(false)
          document.body.style.cursor = 'default'
        }}
      >
        <mesh name="Mesh419_1" geometry={nodes.Mesh419_1.geometry} material={meshMaterial} />
        {/* <mesh name="Mesh419_2" geometry={nodes.Mesh419_2.geometry} material={backMaterial} /> */}

        {/* 指示牌 */}
        <Indicator targetRef={targetRef} name='419' />
      </group>
    </group>
  )
}

useGLTF.preload('/assets/model/hhiot/jz.glb')
