/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 cube419.glb --keepgroups --keepnames
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import Indicator from './Indicator'
import { CubeProps } from './type'
import * as THREE from 'three'
import BimText3D from './text/BimText3D'

type GLTFResult = GLTF & {
  nodes: { [key: string]: THREE.Mesh }
  materials: { [key: string]: THREE.MeshStandardMaterial }
}

export function Cube417({ ...props }: CubeProps) {
  const { nodes, materials } = useGLTF('/assets/model/hhiot/jz.glb') as GLTFResult
  const targetRef = useRef<THREE.Group>(null!)
  const [hovered, setHovered] = useState(false)

  // 克隆材质以防止影响其他使用相同材质的对象
  const meshMaterial = materials.Color_M05.clone()

  // 设置发光效果
  if (hovered) {
    meshMaterial.emissive = new THREE.Color(0x666666)
  } else {
    meshMaterial.emissive = new THREE.Color(0x000000)
  }

  return (
    <group name="417" {...props} dispose={null}>
      <group
        ref={targetRef}
        name="Mesh417"
        position={[-15.4939, 3.15592, 62.43]}
        onPointerOver={(e) => {
          e.stopPropagation()
          setHovered(true)
          document.body.style.cursor = 'pointer'
        }}
        onPointerOut={(e) => {
          e.stopPropagation()
          setHovered(false)
          document.body.style.cursor = 'default'
        }}
      >
        <mesh name="Mesh417" geometry={nodes.Mesh417.geometry} material={meshMaterial} />

        {/* 指示牌 */}
        {hovered && <Indicator targetRef={targetRef} name='417' />}
        <BimText3D text="417" width={6} position={[5, -2, 9]} />
        <BimText3D text="417" width={6} position={[-12.3, -2, 2]} rotation={[0, -Math.PI / 2, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/assets/model/hhiot/jz.glb')
