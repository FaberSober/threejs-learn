/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 cube419.glb --keepgroups --keepnames
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import Indicator from '../Indicator'
import { CubeProps } from '../type'
import * as THREE from 'three'
import BimText3D from '../text/BimText3D'
import useHover from '../hooks/useHover'

type GLTFResult = GLTF & {
  nodes: { [key: string]: THREE.Mesh }
  materials: { [key: string]: THREE.MeshStandardMaterial }
}

export function Cube418({ ...props }: CubeProps) {
  const { nodes, materials } = useGLTF('/assets/model/hhiot/jz.glb') as GLTFResult
  const targetRef = useRef<THREE.Group>(null!)
  const { hovered, onPointerOver, onPointerOut } = useHover()

  // 克隆材质以防止影响其他使用相同材质的对象
  const meshMaterial = materials.Color_M05.clone()

  // 设置发光效果
  if (hovered) {
    meshMaterial.emissive = new THREE.Color(0x666666)
  } else {
    meshMaterial.emissive = new THREE.Color(0x000000)
  }

  return (
    <group name="418" {...props} dispose={null}>
      <group
        ref={targetRef}
        name="Mesh418"
        position={[-15.429, 16.2524, 57.9112]}
        onPointerOver={onPointerOver}
        onPointerOut={onPointerOut}
      >
        <mesh name="Mesh418" geometry={nodes.Mesh418.geometry} material={meshMaterial} />

        {/* 指示牌 */}
        {hovered && <Indicator targetRef={targetRef} name='418' />}
        <BimText3D text="418" width={6} position={[5, 0, 12]} />
        <BimText3D text="418" width={6} position={[-12.3, 0, 5]} rotation={[0, -Math.PI / 2, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/assets/model/hhiot/jz.glb')
