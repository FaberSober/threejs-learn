/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 cube426.glb --keepgroups --keepnames
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import Indicator from './Indicator'
import { CubeProps } from './type'
import * as THREE from 'three'

type GLTFResult = GLTF & {
  nodes: { [key: string]: THREE.Mesh }
  materials: { [key: string]: THREE.MeshStandardMaterial }
}

export function Cube426({ ...props }: CubeProps) {
  const { nodes, materials } = useGLTF('/assets/model/hhiot/jz.glb') as GLTFResult
  const targetRef = useRef<THREE.Group>(null!)
  const [hovered, setHovered] = useState(false)

  // 克隆材质以防止影响其他使用相同材质的对象
  const meshMaterial = materials.Color_M05.clone()

  // 设置发光效果
  if (hovered) {
    meshMaterial.emissive = new THREE.Color(0x666666)
  } else {
    meshMaterial.emissive = new THREE.Color(0x000000)
  }

  return (
    <group name="426" {...props} dispose={null}>
      <group ref={targetRef} name="Mesh426" position={[14.9061, 33.7707, 61.7309]}>
        <mesh
          name="Mesh426_1"
          geometry={nodes.Mesh426_1.geometry}
          material={meshMaterial}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
        />
        {/* <mesh name="Mesh426_2" geometry={nodes.Mesh426_2.geometry} material={materials.BackColor} /> */}

        {/* 指示牌 */}
        <Indicator targetRef={targetRef} name='426' />
      </group>
    </group>
  )
}

useGLTF.preload('/assets/model/hhiot/jz.glb')
